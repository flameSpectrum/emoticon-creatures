/* App.svelte generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text
} from "svelte/internal";

function create_fragment(ctx) {
	let h1;
	let t1;
	let br0;
	let t2;
	let p0;
	let t3;
	let t4;
	let p1;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let br1;
	let t10;
	let p2;
	let t12;
	let p3;
	let t13;
	let t14;
	let t15;
	let br2;
	let t16;
	let button0;
	let t17;
	let t18;
	let t19;
	let br3;
	let t20;
	let p4;
	let t22;
	let p5;
	let t23;
	let t24;
	let t25;
	let progress;
	let t26;
	let br4;
	let t27;
	let h3;
	let t29;
	let p6;
	let t30;
	let t31;
	let t32;
	let t33;
	let p7;
	let t34;
	let t35;
	let t36;
	let t37;
	let br5;
	let t38;
	let p8;
	let t39;
	let t40;
	let t41;
	let t42_value = Math.floor(/*item1cost*/ ctx[7] / 5) + "";
	let t42;
	let t43;
	let t44;
	let button1;
	let t46;
	let button2;
	let mounted;
	let dispose;

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "emoticon creatures";
			t1 = space();
			br0 = element("br");
			t2 = space();
			p0 = element("p");
			t3 = text(/*enemyvis*/ ctx[9]);
			t4 = space();
			p1 = element("p");
			t5 = text("health: ");
			t6 = text(/*enemyhealth*/ ctx[3]);
			t7 = text(", level: ");
			t8 = text(/*enemylevel*/ ctx[5]);
			t9 = space();
			br1 = element("br");
			t10 = space();
			p2 = element("p");
			p2.textContent = "('_')";
			t12 = space();
			p3 = element("p");
			t13 = text("health: ");
			t14 = text(/*playerhealth*/ ctx[4]);
			t15 = space();
			br2 = element("br");
			t16 = space();
			button0 = element("button");
			t17 = text("sword: level ");
			t18 = text(/*item1level*/ ctx[6]);
			t19 = space();
			br3 = element("br");
			t20 = space();
			p4 = element("p");
			p4.textContent = "level stats:";
			t22 = space();
			p5 = element("p");
			t23 = text("(");
			t24 = text(/*level*/ ctx[0]);
			t25 = text("), progress to next level up:");
			progress = element("progress");
			t26 = space();
			br4 = element("br");
			t27 = space();
			h3 = element("h3");
			h3.textContent = "shop:";
			t29 = space();
			p6 = element("p");
			t30 = text("you have ");
			t31 = text(/*coins*/ ctx[8]);
			t32 = text(" coins");
			t33 = space();
			p7 = element("p");
			t34 = text("you have ");
			t35 = text(/*gems*/ ctx[10]);
			t36 = text(" gems");
			t37 = space();
			br5 = element("br");
			t38 = space();
			p8 = element("p");
			t39 = text("upgrade sword: costs ");
			t40 = text(/*item1cost*/ ctx[7]);
			t41 = text(" coins or ");
			t42 = text(t42_value);
			t43 = text(" gems");
			t44 = space();
			button1 = element("button");
			button1.textContent = "upgrade sword (coins)";
			t46 = space();
			button2 = element("button");
			button2.textContent = "upgrade sword (gems)";
			attr(progress, "id", "levelbar");
			progress.value = /*lxp*/ ctx[1];
			attr(progress, "max", /*lxpneeded*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, br0, anchor);
			insert(target, t2, anchor);
			insert(target, p0, anchor);
			append(p0, t3);
			insert(target, t4, anchor);
			insert(target, p1, anchor);
			append(p1, t5);
			append(p1, t6);
			append(p1, t7);
			append(p1, t8);
			insert(target, t9, anchor);
			insert(target, br1, anchor);
			insert(target, t10, anchor);
			insert(target, p2, anchor);
			insert(target, t12, anchor);
			insert(target, p3, anchor);
			append(p3, t13);
			append(p3, t14);
			insert(target, t15, anchor);
			insert(target, br2, anchor);
			insert(target, t16, anchor);
			insert(target, button0, anchor);
			append(button0, t17);
			append(button0, t18);
			insert(target, t19, anchor);
			insert(target, br3, anchor);
			insert(target, t20, anchor);
			insert(target, p4, anchor);
			insert(target, t22, anchor);
			insert(target, p5, anchor);
			append(p5, t23);
			append(p5, t24);
			append(p5, t25);
			insert(target, progress, anchor);
			insert(target, t26, anchor);
			insert(target, br4, anchor);
			insert(target, t27, anchor);
			insert(target, h3, anchor);
			insert(target, t29, anchor);
			insert(target, p6, anchor);
			append(p6, t30);
			append(p6, t31);
			append(p6, t32);
			insert(target, t33, anchor);
			insert(target, p7, anchor);
			append(p7, t34);
			append(p7, t35);
			append(p7, t36);
			insert(target, t37, anchor);
			insert(target, br5, anchor);
			insert(target, t38, anchor);
			insert(target, p8, anchor);
			append(p8, t39);
			append(p8, t40);
			append(p8, t41);
			append(p8, t42);
			append(p8, t43);
			insert(target, t44, anchor);
			insert(target, button1, anchor);
			insert(target, t46, anchor);
			insert(target, button2, anchor);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*playerattack1*/ ctx[11]),
					listen(button1, "click", /*upgradeitem1*/ ctx[12]),
					listen(button2, "click", /*upgradeitem1gems*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*enemyvis*/ 512) set_data(t3, /*enemyvis*/ ctx[9]);
			if (dirty & /*enemyhealth*/ 8) set_data(t6, /*enemyhealth*/ ctx[3]);
			if (dirty & /*enemylevel*/ 32) set_data(t8, /*enemylevel*/ ctx[5]);
			if (dirty & /*playerhealth*/ 16) set_data(t14, /*playerhealth*/ ctx[4]);
			if (dirty & /*item1level*/ 64) set_data(t18, /*item1level*/ ctx[6]);
			if (dirty & /*level*/ 1) set_data(t24, /*level*/ ctx[0]);

			if (dirty & /*lxp*/ 2) {
				progress.value = /*lxp*/ ctx[1];
			}

			if (dirty & /*lxpneeded*/ 4) {
				attr(progress, "max", /*lxpneeded*/ ctx[2]);
			}

			if (dirty & /*coins*/ 256) set_data(t31, /*coins*/ ctx[8]);
			if (dirty & /*gems*/ 1024) set_data(t35, /*gems*/ ctx[10]);
			if (dirty & /*item1cost*/ 128) set_data(t40, /*item1cost*/ ctx[7]);
			if (dirty & /*item1cost*/ 128 && t42_value !== (t42_value = Math.floor(/*item1cost*/ ctx[7] / 5) + "")) set_data(t42, t42_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(br0);
			if (detaching) detach(t2);
			if (detaching) detach(p0);
			if (detaching) detach(t4);
			if (detaching) detach(p1);
			if (detaching) detach(t9);
			if (detaching) detach(br1);
			if (detaching) detach(t10);
			if (detaching) detach(p2);
			if (detaching) detach(t12);
			if (detaching) detach(p3);
			if (detaching) detach(t15);
			if (detaching) detach(br2);
			if (detaching) detach(t16);
			if (detaching) detach(button0);
			if (detaching) detach(t19);
			if (detaching) detach(br3);
			if (detaching) detach(t20);
			if (detaching) detach(p4);
			if (detaching) detach(t22);
			if (detaching) detach(p5);
			if (detaching) detach(progress);
			if (detaching) detach(t26);
			if (detaching) detach(br4);
			if (detaching) detach(t27);
			if (detaching) detach(h3);
			if (detaching) detach(t29);
			if (detaching) detach(p6);
			if (detaching) detach(t33);
			if (detaching) detach(p7);
			if (detaching) detach(t37);
			if (detaching) detach(br5);
			if (detaching) detach(t38);
			if (detaching) detach(p8);
			if (detaching) detach(t44);
			if (detaching) detach(button1);
			if (detaching) detach(t46);
			if (detaching) detach(button2);
			mounted = false;
			run_all(dispose);
		}
	};
}

let loopobject = 0;

function instance($$self, $$props, $$invalidate) {
	let level = 1;
	let lxp = 0;
	let lxpneeded = 50;
	let enemyhealth = 500;
	let enemylowattack = 10;
	let enemyhighattack = 30;
	let playerhealth = 500;
	let playerlowattack = 10;
	let playerhighattack = 30;
	let enemylevel = level + Math.floor(Math.random() * 10) - 4;

	if (enemylevel < 1) {
		enemylevel = 1;
	}

	let item1level = 1;
	let item1cost = 10;
	let playermaxhealth;
	let coins = 0;
	let enemyselect = 0;
	let enemyvis = "]-]=(*-*)=[-[";
	let creaturevalues = [500, 10, 30, 10, 10, 100, 450, 15, 35, 15, 15, 150];
	let gems = 0;

	function reset() {
		$$invalidate(5, enemylevel = level + Math.floor(Math.random() * 10) - 4);

		if (enemylevel < 1) {
			$$invalidate(5, enemylevel = 1);
		}

		enemyselect = Math.floor(Math.random() * 2);

		if (enemyselect == 0) {
			$$invalidate(9, enemyvis = "]-]=(*-*)=[-[");
		} else if (enemyselect == 1) {
			$$invalidate(9, enemyvis = "(o_o)>");
		}

		$$invalidate(3, enemyhealth = creaturevalues[enemyselect * 7] + enemylevel * 10 - 10 + (Math.floor(Math.random() * 20) - 9));
		enemylowattack = creaturevalues[enemyselect * 7 + 1] + enemylevel - 1 + (Math.floor(Math.random() * 6) - 2);
		enemyhighattack = creaturevalues[enemyselect * 7 + 2] + enemylevel - 1 + (Math.floor(Math.random() * 6) - 2);
		$$invalidate(4, playerhealth = 500 + level * 10 - 10);
		playermaxhealth = 500 + level * 10 - 10;
		playerlowattack = 10 + level - 1;
		playerhighattack = 30 + level - 1;
	}

	function gainxp() {
		$$invalidate(1, lxp += creaturevalues[enemyselect * 7 + 3] + (enemylevel - level));

		if (lxp >= lxpneeded) {
			$$invalidate(1, lxp -= lxpneeded);
			$$invalidate(2, lxpneeded += 5);
			$$invalidate(10, gems += level);
			$$invalidate(0, level += 1);
		}
	}

	function gaincoins() {
		let loopobject = 1;

		while (loopobject <= creaturevalues[enemyselect * 7 + 3] + (enemylevel - level)) {
			loopobject += 1;

			if (Math.floor(Math.random() * creaturevalues[enemyselect * 7 + 4]) == 0) {
				$$invalidate(8, coins += 1);
			}
		}
	}

	function gaingems() {
		let loopobject = 1;

		while (loopobject <= creaturevalues[enemyselect * 7 + 3] + (enemylevel - level)) {
			loopobject += 1;

			if (Math.floor(Math.random() * creaturevalues[enemyselect * 7 + 5]) == 0) {
				$$invalidate(8, coins += 1);
			}
		}
	}

	function enemyturn() {
		$$invalidate(4, playerhealth -= Math.floor(Math.random() * enemyhighattack + 1 + (enemyhighattack - enemylowattack)));

		if (playerhealth <= 0) {
			reset();
		}
	}

	function playerattack1() {
		$$invalidate(3, enemyhealth -= Math.floor(Math.random() * (playerhighattack * (item1level * 0.1) + 0.9) + 1 + (playerhighattack * (item1level * 0.1 + 0.9) - playerlowattack * (item1level * 0.1) + 0.9)));

		if (enemyhealth <= 0) {
			gainxp();
			gaincoins();
			reset();
		}

		enemyturn();
	}

	function upgradeitem1() {
		if (coins >= item1cost) {
			$$invalidate(8, coins -= item1cost);
			$$invalidate(7, item1cost += 1);
			$$invalidate(6, item1level += 1);
		}
	}

	function upgradeitem1gems() {
		if (gems >= Math.floor(item1cost / 5)) {
			$$invalidate(10, gems -= Math.floor(item1cost / 5));
			$$invalidate(7, item1cost += 1);
			$$invalidate(6, item1level += 1);
		}
	}

	return [
		level,
		lxp,
		lxpneeded,
		enemyhealth,
		playerhealth,
		enemylevel,
		item1level,
		item1cost,
		coins,
		enemyvis,
		gems,
		playerattack1,
		upgradeitem1,
		upgradeitem1gems
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;
